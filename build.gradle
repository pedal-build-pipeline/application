plugins {
    id 'com.diffplug.spotless' version '6.2.2'
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'com.github.node-gradle.node' version '3.2.1'
}

group = 'com.pedalbuildpipeline'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'
targetCompatibility = '17'

node {
    download = true
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.0")
    set('testcontainersVersion', "1.16.2")
}

spotless {
    java {
        importOrder()
        removeUnusedImports()

        googleJavaFormat()
    }

    sql {
        target 'src/main/resources/db/migration/*.sql'
        target 'src/test/resources/**/*.sql'

        dbeaver()
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.6'
    implementation 'org.springdoc:springdoc-openapi-hateoas:1.6.6'
    implementation 'org.springdoc:springdoc-openapi-security:1.6.6'
    implementation 'com.vladmihalcea:hibernate-types-52:2.14.0'
    implementation 'org.zalando:problem-spring-web:0.27.0'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'

    implementation 'com.github.jknack:handlebars:4.3.0'

    compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.mapstruct:mapstruct:1.4.2.Final'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:mockserver'
    testImplementation 'org.mock-server:mockserver-client-java:5.13.2'
    testImplementation 'net.javacrumbs.json-unit:json-unit-assertj:2.32.0'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:1.16.3"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2021.0.0"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

tasks.named('check') {
    dependsOn jacocoTestCoverageVerification
}

task installMjmlDependencies(type: NpmTask) {
    args = ['install', 'mjml', 'html-to-text', 'glob']
}

task compileMjmlTemplates(type: NodeTask) {
    dependsOn tasks.installMjmlDependencies

    script = file('mjml_build.mjs')
}

tasks.named('processResources') {
    dependsOn tasks.compileMjmlTemplates
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "com/pedalbuildpipeline/pbp/**/config/**/*.class",
                    "com/pedalbuildpipeline/pbp/**/dto/*.class",
                    "com/pedalbuildpipeline/pbp/**/model/**/*.class",
                    "com/pedalbuildpipeline/pbp/**/exception/**/*.class"
            ])
        }))
    }
}
